/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Chris Magnussen and Elior Boukhobza
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 *
 */
buildscript {
    repositories {
        jcenter()
        maven { url 'http://dl.bintray.com/content/aalmiray/kordamp' }
    }
    dependencies {
        classpath 'org.kordamp:markdown-gradle-plugin:1.2.0'
    }
}


plugins {
    id 'org.jetbrains.intellij' version '0.3.12'
    id 'jacoco'
    id 'checkstyle'
    id 'org.jetbrains.kotlin.jvm' version '1.3.11'
}

repositories {
    mavenCentral()
    maven { url 'http://dl.bintray.com/jetbrains/intellij-plugin-service' }
}


dependencies {
    compile('com.thoughtworks.xstream:xstream:1.4.10')
    compile group: 'org.javassist', name: 'javassist', version: '3.21.0-GA'
    compile group: 'commons-io', name: 'commons-io', version: '2.6'
    compile 'com.mixpanel:mixpanel-java:+'
    testImplementation(
            'org.junit.jupiter:junit-jupiter-api:5.1.0'
    )
    testRuntimeOnly(
            'org.junit.jupiter:junit-jupiter-engine:5.1.0'
    )
    testCompile 'junit:junit:4.12'
    testCompile group: 'org.powermock', name: 'powermock', version: '1.6.5'
    testCompile group: 'org.powermock', name: 'powermock-api-mockito2', version: '1.7.0'
    testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: '1.7.0'


    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.7.1'
    testCompile group: 'org.objenesis', name: 'objenesis', version: '2.4'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

}
apply plugin: 'org.kordamp.markdown.convert'

apply plugin: 'java'
apply plugin: 'checkstyle'
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

apply plugin: "kotlin"

//noinspection GroovyAssignabilityCheck,GrUnresolvedAccess
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    //noinspection GrUnresolvedAccess
    kotlinOptions {
        apiVersion = "1.0"
        jvmTarget = "1.8"
    }
}

sourceSets {
    main {
        java.srcDirs 'src/main/java'
        resources.srcDir 'src/main/resources'
    }
    test {
        java.srcDir 'src/test/java'
        resources.srcDir 'src/test/resources'
    }
}

checkstyle {
    configFile = new File(rootDir, "gradle/checkstyle.xml")
    toolVersion = "8.1"
}

test {
    testLogging {
        exceptionFormat = 'full'
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

markdownToHtml {
    sourceDir new File("$projectDir/docs")
    outputDir new File("$projectDir/docs")
}

version = System.getenv("pluginVersion") ?: pluginVersion

intellij {
    pluginName 'DDLC Theme'
    type 'IU'
    version '192.5728.98'
    alternativeIdePath idePath
    downloadSources true
    updateSinceUntilBuild true

    publishPlugin {
        username System.getenv("pluginUsername")
        password System.getenv("pluginPassword")
    }

    patchPluginXml {
        version "$version"
        sinceBuild System.getenv("pluginSinceBuild") ?: sinceBuildP
        changeNotes file("$projectDir/docs/CHANGELOG.html").text
        untilBuild System.getenv("pluginUntilBuild") ?: untilBuildP
    }

    publishPlugin {
        username System.getenv("publishUsername") ?: publishUsername
        password System.getenv("publishPassword") ?: publishPassword
    }
}
compileKotlin {
    kotlinOptions {
        apiVersion = "1.1"
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

